# Copyright (c) 2010-2011, Duong Dang <mailto:dang.duong@gmail.com>
# This file is part of robot-viewer.

# robot-viewer is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# robot-viewer is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU Lesser General Public License for more details.

# You should have received a copy of the GNU Lesser General Public License
# along with robot-viewer. If not, see <http://www.gnu.org/licenses/>.


<header>         := -[\n]*
vrmlScene        := rootItem*
>rootItem<       := ts,(Proto/ExternProto/ROUTE/('USE',ts,USE,ts)/Script/Node),ts
<Proto>          := 'PROTO',ts,nodegi,ts,'[',ts,(fieldDecl/eventDecl)*,']', ts, '{', ts, vrmlScene,ts, '}', ts
fieldDecl	 := fieldExposure,ts,dataType,ts,name,ts,Field,ts
fieldExposure    := 'field'/'exposedField'
dataType         := 'SFBool'/'SFString'/'SFFloat'/'SFTime'/'SFVec3f'/'SFVec2f'/'SFRotation'/'SFInt32'/'SFImage'/'SFColor'/'SFNode'/'MFBool'/'MFString'/'MFFloat'/'MFTime'/'MFVec3f'/'MFVec2f'/'MFRotation'/'MFInt32'/'MFColor'/'MFNode'
eventDecl        := eventDirection, ts, dataType, ts, name, ts
eventDirection   := 'eventIn'/'eventOut'
<ExternProto>    := 'EXTERNPROTO',ts,nodegi,ts,'[',ts,(extFieldDecl/eventDecl)*,']', ts, ExtProtoURL
extFieldDecl     := fieldExposure,ts,dataType,ts,name,ts
ExtProtoURL      := '['?,(ts,SFString)*, ts, ']'?, ts  # just an MFString by another name :)
<ROUTE>          := 'ROUTE',ts, name,'.',name, ts, 'TO', ts, name,'.',name, ts
<Script>         := (Def)?,'Script',ts,'{',ts,(ScriptFieldDecl/ScriptEventDecl/Proto/ExternProto/ROUTE/Attr)*,ts,'}', ts
ScriptEventDecl  := eventDirection, ts, dataType, ts, name, ts, ('IS', ts, IS,ts)?
ScriptFieldDecl  := fieldExposure,ts,dataType,ts,name,ts,(('IS', ts,IS,ts)/Field),ts
SFNull           := 'NULL', ts

Def              :='DEF',ts,name,ts
DefNode          := Def,NodewoDef
>nodeContent<    := '{',ts,(Proto/ExternProto/ROUTE/Attr)*,ts,'}', ts
unknownNode      := nodegi,ts,nodeContent
>Node<           := DefNode/NodewoDef
>NodewoDef<      := Ignored_Node/Userdefined_Nodes_Group/Standard_Node/unknownNode
USE              := name
IS               := name
>nodegi<         := name
Attr             := name, ts, (('IS', ts,IS,ts)/Field), ts
Field            := ( '[',ts,((SFNumber/SFBool/SFString/('USE',ts,USE,ts)/Script/Node),ts)*, ']', ts )/((SFNumber/SFBool/SFNull/SFString/('USE',ts,USE,ts)/Script/Node),ts)+

name             := -[][0-9{}\000-\020"'#,.\\ ],  -[][{}\000-\020"'#,.\\ ]*
SFNumber         := [-+]*, ( ('0',[xX],[0-9]+) / ([0-9.]+,([eE],[-+0-9.]+)?))
SFBool           := 'TRUE'/'FALSE'
SFString         := '"',(CHARNODBLQUOTE/ESCAPEDCHAR/SIMPLEBACKSLASH)*,'"'
<CHARNODBLQUOTE> :=  -[\134"]+
<SIMPLEBACKSLASH>:= '\134'
<ESCAPEDCHAR>    := '\\"'/'\134\134'
<ts>             :=  ( [ \011-\015,]+ / ('#',-'\012'*,'\n')+ )*

## Userdefined Nodes

humanoid         := "Humanoid",ts,nodeContent
joint            := "Joint",ts,nodeContent
genericObject    := "Group"/"Segment"/"Transform"/"AccelerationSensor"/"Gyro",ts,nodeContent
>Userdefined_Nodes_Group< := humanoid/joint/genericObject
# should really have an optimised way of declaring a different reporting name for the same production...


<Ignored_Node>   := anchor/billboard/collision/lOD/switch/audioClip/directionalLight/pointLight/script/sound/spotLight/worldInfo/sensors/cylinderSensor/planeSensor/proximitySensor/sphereSensor/timeSensor/touchSensor/visibilitySensor/fog/navigationInfo/viewpoint/background/imageTexture/color


## Grouping nodes
anchor := "Anchor",ts,nodeContent
billboard := "Billboard",ts,nodeContent
collision := "Collision",ts,nodeContent
group := "Group",ts,nodeContent
transform := "Transform",ts,nodeContent
>Grouping_nodes_Group< := anchor/billboard/collision/group/transform

## Special Groups
inline := "Inline",ts,nodeContent
lOD := "LOD",ts,nodeContent
switch := "Switch",ts,nodeContent
>Special_Groups_Group< := inline/lOD/switch

## Common Nodes
audioClip := "AudioClip",ts,nodeContent
directionalLight := "DirectionalLight",ts,nodeContent
pointLight := "PointLight",ts,nodeContent
script := "Script",ts,nodeContent
shape := "Shape",ts,nodeContent
sound := "Sound",ts,nodeContent
spotLight := "SpotLight",ts,nodeContent
worldInfo := "WorldInfo",ts,nodeContent
sensors := "Sensors",ts,nodeContent
cylinderSensor := "CylinderSensor",ts,nodeContent
planeSensor := "PlaneSensor",ts,nodeContent
proximitySensor := "ProximitySensor",ts,nodeContent
sphereSensor := "SphereSensor",ts,nodeContent
timeSensor := "TimeSensor",ts,nodeContent
touchSensor := "TouchSensor",ts,nodeContent
visibilitySensor := "VisibilitySensor",ts,nodeContent
>Common_Nodes_Group< := audioClip/directionalLight/pointLight/script/shape/sound/spotLight/worldInfo/sensors/cylinderSensor/planeSensor/proximitySensor/sphereSensor/timeSensor/touchSensor/visibilitySensor

## Geometry
box := "Box",ts,nodeContent
cone := "Cone",ts,nodeContent
cylinder := "Cylinder",ts,nodeContent
elevationGrid := "ElevationGrid",ts,nodeContent
extrusion := "Extrusion",ts,nodeContent
indexedFaceSet := "IndexedFaceSet",ts,nodeContent
indexedLineSet := "IndexedLineSet",ts,nodeContent
pointSet := "PointSet",ts,nodeContent
sphere := "Sphere",ts,nodeContent
text := "Text",ts,nodeContent
>Geometry_Group< := box/cone/cylinder/elevationGrid/extrusion/indexedFaceSet/indexedLineSet/pointSet/sphere/text

## Geometric Properties
color := "Color",ts,nodeContent
coordinate := "Coordinate",ts,nodeContent
normal := "Normal",ts,nodeContent
textureCoordinate := "TextureCoordinate",ts,nodeContent
>Geometric_Properties_Group< := color/coordinate/normal/textureCoordinate

## Appearance
appearance := "Appearance",ts,nodeContent
fontStyle := "FontStyle",ts,nodeContent
imageTexture := "ImageTexture",ts,nodeContent
material := "Material",ts,nodeContent
movieTexture := "MovieTexture",ts,nodeContent
pixelTexture := "PixelTexture",ts,nodeContent
textureTransform := "TextureTransform",ts,nodeContent
>Appearance_Group< := appearance/fontStyle/imageTexture/material/movieTexture/pixelTexture/textureTransform

## Interpolators
colorInterpolator := "ColorInterpolator",ts,nodeContent
coordinateInterpolator := "CoordinateInterpolator",ts,nodeContent
normalInterpolator := "NormalInterpolator",ts,nodeContent
orientationInterpolator := "OrientationInterpolator",ts,nodeContent
positionInterpolator := "PositionInterpolator",ts,nodeContent
scalarInterpolator := "ScalarInterpolator",ts,nodeContent
>Interpolators_Group< := colorInterpolator/coordinateInterpolator/normalInterpolator/orientationInterpolator/positionInterpolator/scalarInterpolator

## Bindable Nodes
background := "Background",ts,nodeContent
fog := "Fog",ts,nodeContent
navigationInfo := "NavigationInfo",ts,nodeContent
viewpoint := "Viewpoint",ts,nodeContent
>Bindable_Nodes_Group< := background/fog/navigationInfo/viewpoint


>Standard_Node< := Grouping_nodes_Group/Special_Groups_Group/Common_Nodes_Group/Geometry_Group/Geometric_Properties_Group/Appearance_Group/Interpolators_Group/Bindable_Nodes_Group
